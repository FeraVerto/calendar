{"version":3,"sources":["ui/Month/Month.module.css","ui/App.module.css","ui/TitleColumn/TitleColumn.module.css","bll/calendarReducers.ts","ui/Day/Days.tsx","ui/TitleColumn/TitleColumn.tsx","ui/Caption/Caption.tsx","ui/Month/Month.tsx","common/utils/getDate.ts","common/utils/uppercaseFirstLetter.ts","ui/App.tsx","reportWebVitals.ts","bll/redux-store.ts","index.tsx","ui/Caption/Caption.module.css","ui/Day/Day.module.css"],"names":["module","exports","SWITCH_MONTH","SET_SELECT_DAYS","initialState","currentDay","dayjs","day","currentMonth","month","currentYear","year","selectedDays","Days","ceil","setSelectDate","onClick","isActive","date","format","className","s","table_ceil","active","isCurrentMonth","table_ceil_month","isCurrentDay","table_ceil_current_day","isSelected","selectedDay","TitleColumn","title_column","map","w","i","toUpperCase","Caption","onSwitchMonth","caption_table","arrow_left","arrow","caption_table_month","arrow_right","locale","extend","isToday","arraySupport","updateLocale","localeData","weekday","Month","dispatch","useState","selectDate","useEffect","localStorage","setItem","data","Object","keys","type","setSelectDaysAC","table","rows","startCalendarDay","startOf","j","push","isSame","isNextMonth","some","isBefore","add","str","monthName","slice","direction","onSwitchMonthAC","table_rows_container","t","table_rows","App","useSelector","state","calendar","useDispatch","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","currentDate","switchedMonth","subtract","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b85cabe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Month_table__22P_f\",\"table_rows_container\":\"Month_table_rows_container__3i9GP\",\"table_rows\":\"Month_table_rows__1r1Ny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2CsLU\",\"App-logo\":\"App_App-logo__2Eox5\",\"App-logo-spin\":\"App_App-logo-spin__14T80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title_column\":\"TitleColumn_title_column__2LD-f\"};","import dayjs from \"dayjs\"\n\nconst SWITCH_MONTH = \"calendar/DIRECTION_MONTH\"\nconst SET_SELECT_DAYS = \"calendar/SET_SELECT_DAYS\"\n\ntype CalendarType = {\n    currentDay: number\n    currentMonth: number\n    currentYear: number\n    selectedDays: Array<string>\n}\n\nexport const initialState: CalendarType = {\n    currentDay: dayjs().day(),\n    currentMonth: dayjs().month(),\n    currentYear: dayjs().year(),\n    selectedDays: []\n}\n\ntype onSwitchMonthACType = ReturnType<typeof onSwitchMonthAC>\ntype setSelectDaysACType = ReturnType<typeof setSelectDaysAC>\nexport type ActionType = onSwitchMonthACType | setSelectDaysACType\n\nexport const calendarReducer = (state = initialState, action: ActionType): CalendarType => {\n    switch (action.type) {\n\n        case SWITCH_MONTH: {\n            const currentDate = dayjs().month(state.currentMonth).year(state.currentYear)\n            const switchedMonth =\n                action.direction === \"back\"\n                    ? currentDate.subtract(1, \"month\")\n                    : currentDate.add(1, \"month\")\n\n            return {\n                ...state,\n                currentMonth: switchedMonth.month(),\n                currentYear: switchedMonth.year()\n            }\n        }\n\n        case SET_SELECT_DAYS:\n            return {\n                ...state,\n                selectedDays: [...action.selectedDays]\n            }\n\n        default:\n            return state\n    }\n}\n\n\nexport const onSwitchMonthAC = (direction: string) => ({type: SWITCH_MONTH, direction} as const)\nexport const setSelectDaysAC = (selectedDays: Array<string>) => ({type: SET_SELECT_DAYS, selectedDays} as const)","import s from \"./Day.module.css\"\nimport React from \"react\"\n\n\ntype DayComponentType = {\n    ceil: any\n    selectDate: string\n    setSelectDate: (selectDate: string) => void\n}\n\nexport const Days = ({ceil, setSelectDate}: DayComponentType) => {\n\n    /*const a = (e: any) => {\n        if (e.nativeEvent.shiftKey) {\n            console.log(\"Shift\")\n        }\n    }*/\n\n    const onSelectDay = (date: any) => {\n\n        setSelectDate(date)\n    }\n\n    return (\n        <>\n            <td onClick={() => !ceil.isActive && onSelectDay(ceil.date.format(\"YYYY-MM-DD\"))}\n                className={`${s.table_ceil} ${ceil.isActive && s.active} ${!ceil.isCurrentMonth && s.table_ceil_month} ${ceil.isCurrentDay && s.table_ceil_current_day} ${ceil.isSelected && s.selectedDay}`}>\n                {ceil.date.date()}\n            </td>\n        </>\n    )\n}","import s from \"./TitleColumn.module.css\"\nimport React from \"react\"\n\nexport const TitleColumn = () => {\n    const weeks = [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"]\n    return (\n        <thead>\n            <tr className={s.title_column}>\n                {\n                    weeks.map((w, i) => <td key={i}>{w.toUpperCase()}</td>)\n                }\n            </tr>\n        </thead>\n    )\n}","import s from \"./Caption.module.css\"\nimport React from \"react\"\n\ntype CaptionType = {\n    month: string\n    year: number\n    onSwitchMonth: (direction: string) => void\n}\n\nexport const Caption = ({month, year, onSwitchMonth}: CaptionType) => {\n    return (\n        <caption className={s.caption_table}>\n            <span className={`${s.arrow_left} ${s.arrow}`} onClick={() => onSwitchMonth(\"back\")}> </span>\n            <div className={s.caption_table_month}>{month + \" \" + year}</div>\n            <span className={`${s.arrow_right} ${s.arrow}`} onClick={() => onSwitchMonth(\"next\")}> </span>\n        </caption>\n    )\n}","import React, {Dispatch, useEffect, useState} from \"react\"\nimport s from \"./Month.module.css\"\nimport {ActionType, onSwitchMonthAC, setSelectDaysAC} from \"../../bll/calendarReducers\"\nimport {uppercaseFirstLetter} from \"../../common/utils/uppercaseFirstLetter\"\nimport dayjs from \"dayjs\"\nimport isToday from \"dayjs/plugin/isToday\"\nimport arraySupport from \"dayjs/plugin/arraySupport\"\nimport updateLocale from \"dayjs/plugin/updateLocale\"\nimport localeData from \"dayjs/plugin/localeData\"\nimport weekday from \"dayjs/plugin/weekday\"\nimport \"dayjs/locale/ru\"\nimport {Days} from \"../Day/Days\"\nimport {TitleColumn} from \"../TitleColumn/TitleColumn\"\nimport {Caption} from \"../Caption/Caption\"\nimport {getDate} from \"../../common/utils/getDate\"\n\n\ndayjs.locale(\"ru\")\n\ndayjs.extend(isToday)\ndayjs.extend(arraySupport)\ndayjs.extend(updateLocale)\ndayjs.extend(localeData)\ndayjs.extend(weekday)\n\nconst ROWS_TABLE = 6\nconst COLS_TABLE = 7\n\ntype MonthType = {\n    month: number\n    year: number\n    dispatch: Dispatch<ActionType>\n    selectedDays: Array<string>\n}\n\nexport type DayType = {\n    date: any\n    month: number\n    isCurrentDay: boolean\n    isCurrentMonth: boolean\n    isNextMonth: boolean\n    isSelected: boolean\n    isActive: boolean\n}\n\n\nexport const Month = ({year, month, selectedDays, dispatch}: MonthType) => {\n    const date = dayjs()\n\n    const [selectDate, setSelectDate] = useState<string>(\"\")\n\n    useEffect(() => {\n        selectDate !== \"\" && localStorage.setItem(selectDate, selectDate)\n        const data = getDate()\n        data && dispatch(setSelectDaysAC(data))\n    }, [selectDate])\n\n    const table: Array<Array<DayType>> = []\n    let rows: Array<DayType> = []\n\n    let startCalendarDay = date\n        .month(month)\n        .year(year)\n        .startOf(\"month\")\n        .weekday(0)\n\n\n    for (let i = 0; i < ROWS_TABLE; i++) {\n        rows = []\n        for (let j = 0; j < COLS_TABLE; j++) {\n            rows.push({\n                date: startCalendarDay,\n                month: startCalendarDay.month(),\n                isCurrentDay: startCalendarDay.isSame(date, \"day\"),\n                isCurrentMonth: month === startCalendarDay.month(),\n                isNextMonth: month < startCalendarDay.month(),\n                isSelected: selectedDays.some(s => s === startCalendarDay.format(\"YYYY-MM-DD\")),\n                isActive: startCalendarDay.isBefore(date, \"day\")\n            })\n            startCalendarDay = startCalendarDay.add(1, \"day\")\n        }\n        table.push(rows)\n    }\n\n    const monthName = uppercaseFirstLetter(date.month(month).format(\"MMMM\"))\n\n    const onSwitchMonth = (direction: string) => {\n        dispatch(onSwitchMonthAC(direction))\n    }\n\n    return (\n        <table className={s.table}>\n            <Caption year={year} month={monthName} onSwitchMonth={onSwitchMonth}/>\n            <TitleColumn/>\n            <tbody className={s.table_rows_container}>\n                {\n                    table.map((t, i) =>\n                        <tr key={i} className={s.table_rows}>\n                            {\n                                t.map((ceil, i) => <Days key={i} selectDate={selectDate} setSelectDate={setSelectDate} ceil={ceil}/>)\n                            }\n                        </tr>)\n                }\n            </tbody>\n        </table>\n    )\n}","export const getDate = () => {\n    const keys: Array<string> = Object.keys(localStorage)\n    return keys\n}\n","export const uppercaseFirstLetter = (str: string) => {\n    if (!str) return str\n    return str[0].toUpperCase() + str.slice(1)\n}\n","import React from \"react\"\nimport s from \"./App.module.css\"\nimport {Month} from \"./Month/Month\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {AppStateType} from \"../bll/redux-store\"\n\n\nconst App = () => {\n\n    const month = useSelector<AppStateType, number>(state => state.calendar.currentMonth)\n    const year = useSelector<AppStateType, number>(state => state.calendar.currentYear)\n    const selectedDays = useSelector<AppStateType, Array<string>>(state => state.calendar.selectedDays)\n    const dispatch = useDispatch()\n\n    return (\n        <div className={s.app}>\n            <h1>Календарь</h1>\n            <Month selectedDays={selectedDays} year={year} month={month} dispatch={dispatch}/>\n        </div>\n    )\n}\n\nexport default App\n","import {ReportHandler} from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import {combineReducers, createStore, Store} from \"redux\"\nimport {calendarReducer} from \"./calendarReducers\"\n\nconst reducer = combineReducers({\n    calendar: calendarReducer\n})\n\nexport type AppStateType = ReturnType<typeof reducer>\nexport type StoreType = Store<AppStateType>\n\nexport const store: StoreType = createStore(reducer)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./ui/App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport {Provider} from \"react-redux\"\nimport {store} from \"./bll/redux-store\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caption_table\":\"Caption_caption_table__269PX\",\"caption_table_month\":\"Caption_caption_table_month__1d8S0\",\"arrow\":\"Caption_arrow__1kjNX\",\"arrow_left\":\"Caption_arrow_left__B-5yP\",\"arrow_right\":\"Caption_arrow_right__aougB\",\"arrow_border\":\"Caption_arrow_border__1tttT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table_ceil\":\"Day_table_ceil__CbRE-\",\"table_ceil_month\":\"Day_table_ceil_month__1YPRM\",\"table_ceil_current_day\":\"Day_table_ceil_current_day__1Nbaw\",\"selectedDay\":\"Day_selectedDay__13hGh\",\"active\":\"Day_active__3mBf1\"};"],"sourceRoot":""}