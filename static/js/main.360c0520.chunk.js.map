{"version":3,"sources":["ui/Month/Month.module.css","ui/App.module.css","ui/TitleColumn/TitleColumn.module.css","bll/calendarReducers.ts","ui/TitleColumn/TitleColumn.tsx","ui/Caption/Caption.tsx","ui/Day/Day.tsx","ui/Month/Month.tsx","common/utils/onMultiSelectDay.ts","common/utils/getDate.ts","common/utils/uppercaseFirstLetter.ts","ui/App.tsx","bll/redux-store.ts","index.tsx","ui/Caption/Caption.module.css","ui/Day/Day.module.css"],"names":["module","exports","SWITCH_MONTH","SET_SELECT_DAYS","initialState","currentDay","dayjs","day","currentMonth","month","currentYear","year","selectedDays","TitleColumn","className","s","title_column","map","w","i","toUpperCase","Caption","onSwitchMonth","caption_table","arrow_left","arrow","onClick","caption_table_month","arrow_right","Day","ceil","setSelectDate","setMultiSelect","setOneSelectDay","setLastSelectDay","multiSelect","currentDayString","date","format","e","isActive","isContainedInLocaleStorage","some","selected","nativeEvent","shiftKey","end","action","start","onSelectDay","table_ceil","active","isCurrentMonth","table_ceil_month","isCurrentDay","table_ceil_current_day","isSelected","selectedDay","locale","extend","isToday","arraySupport","updateLocale","localeData","weekday","isSameOrBefore","Month","dispatch","useState","selectDate","useEffect","localStorage","setItem","removeItem","startDay","endDay","isBefore","arr","push","add","onMultiSelectDay","m","data","Object","keys","type","setSelectDaysAC","table","rows","startCalendarDay","startOf","j","isSame","isNextMonth","str","monthName","slice","direction","onSwitchMonthAC","table_rows_container","t","table_rows","App","useSelector","state","calendar","useDispatch","app","reducer","combineReducers","currentDate","switchedMonth","subtract","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.360c0520.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Month_table__22P_f\",\"table_rows_container\":\"Month_table_rows_container__3i9GP\",\"table_rows\":\"Month_table_rows__1r1Ny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2CsLU\",\"App-logo\":\"App_App-logo__2Eox5\",\"App-logo-spin\":\"App_App-logo-spin__14T80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title_column\":\"TitleColumn_title_column__2LD-f\"};","import dayjs from \"dayjs\"\n\nconst SWITCH_MONTH = \"calendar/DIRECTION_MONTH\"\nconst SET_SELECT_DAYS = \"calendar/SET_SELECT_DAYS\"\n\ntype CalendarType = {\n    currentDay: number\n    currentMonth: number\n    currentYear: number\n    selectedDays: Array<string>\n}\n\nexport const initialState: CalendarType = {\n    currentDay: dayjs().day(),\n    currentMonth: dayjs().month(),\n    currentYear: dayjs().year(),\n    selectedDays: []\n}\n\ntype onSwitchMonthACType = ReturnType<typeof onSwitchMonthAC>\ntype setSelectDaysACType = ReturnType<typeof setSelectDaysAC>\nexport type ActionType = onSwitchMonthACType | setSelectDaysACType\n\nexport const calendarReducer = (state = initialState, action: ActionType): CalendarType => {\n    switch (action.type) {\n\n        case SWITCH_MONTH: {\n            const currentDate = dayjs().month(state.currentMonth).year(state.currentYear)\n            const switchedMonth =\n                action.direction === \"back\"\n                    ? currentDate.subtract(1, \"month\")\n                    : currentDate.add(1, \"month\")\n\n            return {\n                ...state,\n                currentMonth: switchedMonth.month(),\n                currentYear: switchedMonth.year()\n            }\n        }\n\n        case SET_SELECT_DAYS:\n            return {\n                ...state,\n                selectedDays: [...action.selectedDays]\n            }\n\n        default:\n            return state\n    }\n}\n\n\n\nexport const onSwitchMonthAC = (direction: string) => ({type: SWITCH_MONTH, direction} as const)\nexport const setSelectDaysAC = (selectedDays: Array<string>) => ({type: SET_SELECT_DAYS, selectedDays} as const)\n/*\nexport const removeDateAC = (date: string) => {\n    console.log(\"remove\", date)\n    return {type: REMOVE_DATE, date} as const\n}*/\n\n\n/*case REMOVE_DATE:\n    return {\n        ...state,\n        selectedDays: state.selectedDays.filter(f => f !== action.date)\n    }*/\n","import s from \"./TitleColumn.module.css\"\nimport React, {ReactElement} from \"react\"\n\nexport const TitleColumn = (): ReactElement => {\n    const weeks = [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"]\n    return (\n        <thead>\n            <tr className={s.title_column}>\n                {\n                    weeks.map((w, i) => <td key={i}>{w.toUpperCase()}</td>)\n                }\n            </tr>\n        </thead>\n    )\n}","import s from \"./Caption.module.css\"\nimport React, {ReactElement} from \"react\"\n\ntype CaptionType = {\n    month: string\n    year: number\n    onSwitchMonth: (direction: string) => void\n}\n\nexport const Caption = ({month, year, onSwitchMonth}: CaptionType): ReactElement => {\n    return (\n        <caption className={s.caption_table}>\n            <span className={`${s.arrow_left} ${s.arrow}`} onClick={() => onSwitchMonth(\"back\")}> </span>\n            <div className={s.caption_table_month}>{month + \" \" + year}</div>\n            <span className={`${s.arrow_right} ${s.arrow}`} onClick={() => onSwitchMonth(\"next\")}> </span>\n        </caption>\n    )\n}","import s from \"./Day.module.css\"\nimport React, {ReactElement} from \"react\"\nimport {DayType, MultiSelectType} from \"../Month/Month\"\n\n\ntype DayComponentType = {\n    ceil: DayType\n    setSelectDate: (selectDate: { action: \"\" | \"add\" | \"delete\", date: string }) => void\n    selectedDays: Array<string>\n    oneSelectDay?: string\n    setOneSelectDay?: (oneSelectDay: string) => void\n    lastSelectDay?: string\n    setLastSelectDay?: (lastSelectDay: string) => void\n    setMultiSelect: (multiSelect: MultiSelectType) => void\n    multiSelect: MultiSelectType\n}\n\nexport const Day = ({ceil, setSelectDate, selectedDays, setOneSelectDay, setLastSelectDay, setMultiSelect, multiSelect}: DayComponentType): ReactElement => {\n\n\n\n    const currentDayString: string = ceil.date && ceil.date.format(\"YYYY-MM-DD\")\n\n    const onSelectDay = (date: string, e: any) => {\n\n        const isContainedInLocaleStorage: boolean = selectedDays.some(selected => selected === date)\n\n        if (e.nativeEvent.shiftKey) {\n            setMultiSelect({...multiSelect, end: date})\n        }\n        if (isContainedInLocaleStorage) {\n            setSelectDate({action: \"delete\", date: date})\n        } else if(!isContainedInLocaleStorage && !e.nativeEvent.shiftKey) {\n            setSelectDate({action: \"add\", date: date})\n            setMultiSelect({start: date, end: null})\n        }\n\n    }\n\n    return (\n        <td onClick={(e) => !ceil.isActive && onSelectDay(currentDayString, e)}\n            className={`${s.table_ceil} ${ceil.isActive && s.active} ${!ceil.isCurrentMonth && s.table_ceil_month} ${ceil.isCurrentDay && s.table_ceil_current_day} ${ceil.isSelected && s.selectedDay}`}>\n            {ceil.date.date()}\n        </td>\n    )\n}","import React, {Dispatch, ReactElement, useEffect, useState} from \"react\"\nimport s from \"./Month.module.css\"\nimport {ActionType, onSwitchMonthAC, setSelectDaysAC} from \"../../bll/calendarReducers\"\nimport {uppercaseFirstLetter} from \"../../common/utils/uppercaseFirstLetter\"\nimport dayjs, {Dayjs} from \"dayjs\"\nimport isToday from \"dayjs/plugin/isToday\"\nimport arraySupport from \"dayjs/plugin/arraySupport\"\nimport updateLocale from \"dayjs/plugin/updateLocale\"\nimport localeData from \"dayjs/plugin/localeData\"\nimport weekday from \"dayjs/plugin/weekday\"\nimport \"dayjs/locale/ru\"\nimport {TitleColumn} from \"../TitleColumn/TitleColumn\"\nimport {Caption} from \"../Caption/Caption\"\nimport {getDate} from \"../../common/utils/getDate\"\nimport {Day} from \"../Day/Day\"\nimport isSameOrBefore from \"dayjs/plugin/isSameOrBefore\"\nimport {onMultiSelectDay} from \"../../common/utils/onMultiSelectDay\"\n\n\ndayjs.locale(\"ru\")\n\ndayjs.extend(isToday)\ndayjs.extend(arraySupport)\ndayjs.extend(updateLocale)\ndayjs.extend(localeData)\ndayjs.extend(weekday)\ndayjs.extend(isSameOrBefore)\n\n\nconst ROWS_TABLE = 6\nconst COLS_TABLE = 7\n\ntype MonthType = {\n    month: number\n    year: number\n    dispatch: Dispatch<ActionType>\n    selectedDays: Array<string>\n}\n\nexport type DayType = {\n    date: Dayjs\n    month: number\n    isCurrentDay: boolean\n    isCurrentMonth: boolean\n    isNextMonth: boolean\n    isSelected: boolean\n    isActive: boolean\n}\n\nexport type MultiSelectType = { start: null | string, end: null | string }\n\n\nexport const Month = ({year, month, selectedDays, dispatch}: MonthType): ReactElement => {\n    const date: Dayjs = dayjs()\n\n    const [selectDate, setSelectDate] = useState<{ action: \"\" | \"add\" | \"delete\", date: string }>({\n        action: \"\",\n        date: \"\"\n    })\n\n    const [multiSelect, setMultiSelect] = useState<MultiSelectType>({start: null, end: null})\n\n    useEffect(() => {\n        if (selectDate.action === \"add\") {\n            localStorage.setItem(selectDate.date, selectDate.date)\n        }\n        if (selectDate.action === \"delete\") {\n            localStorage.removeItem(selectDate.date)\n        }\n        setSelectDate({\n            action: \"\",\n            date: \"\"\n        })\n\n        if (multiSelect.start && multiSelect.end) {\n            onMultiSelectDay(multiSelect).map(m => localStorage.setItem(m, m))\n            setMultiSelect({start: null, end: null})\n        }\n\n        const data: Array<string> = getDate()\n        data && dispatch(setSelectDaysAC(data))\n\n    }, [selectDate.date, selectDate.action, multiSelect])\n\n    const table: Array<Array<DayType>> = []\n    let rows: Array<DayType> = []\n\n    let startCalendarDay: Dayjs = date\n        .month(month)\n        .year(year)\n        .startOf(\"month\")\n        .weekday(0)\n\n\n    for (let i = 0; i < ROWS_TABLE; i++) {\n        rows = []\n        for (let j = 0; j < COLS_TABLE; j++) {\n            rows.push({\n                date: startCalendarDay,\n                month: startCalendarDay.month(),\n                isCurrentDay: startCalendarDay.isSame(date, \"day\"),\n                isCurrentMonth: month === startCalendarDay.month(),\n                isNextMonth: month < startCalendarDay.month(),\n                isSelected: selectedDays.some(s => s === startCalendarDay.format(\"YYYY-MM-DD\")),\n                isActive: startCalendarDay.isBefore(date, \"day\")\n            })\n            startCalendarDay = startCalendarDay.add(1, \"day\")\n        }\n        table.push(rows)\n    }\n\n    const monthName: string = uppercaseFirstLetter(date.month(month).format(\"MMMM\"))\n\n    const onSwitchMonth = (direction: string) => {\n        dispatch(onSwitchMonthAC(direction))\n    }\n\n    return (\n        <table className={s.table}>\n            <Caption year={year} month={monthName} onSwitchMonth={onSwitchMonth}/>\n            <TitleColumn/>\n            <tbody className={s.table_rows_container}>\n                {\n                    table.map((t: Array<DayType>, i: number) =>\n                        <tr key={i} className={s.table_rows}>\n                            {\n                                t.map((ceil: DayType) =>\n                                    <Day multiSelect={multiSelect} setMultiSelect={setMultiSelect} selectedDays={selectedDays} key={ceil.date.format(\"YYYY-MM-DD\")} setSelectDate={setSelectDate} ceil={ceil}/>)\n                            }\n                        </tr>)\n                }\n            </tbody>\n        </table>\n    )\n}\n\n\n","import dayjs, {Dayjs} from \"dayjs\"\nimport {MultiSelectType} from \"../../ui/Month/Month\"\n\nexport const onMultiSelectDay = (date: MultiSelectType) => {\n\n    const startDay: Dayjs = dayjs(date.start, \"YYYY-MM-DD\")\n    const endDay: Dayjs = dayjs(date.end, \"YYYY-MM-DD\")\n\n    /* eslint-disable */\n    let [start, end] =  startDay.isBefore(endDay, \"day\") ? [startDay, endDay] : [endDay, startDay]\n    /* eslint-enable */\n\n    const arr: Array<string> = []\n    while (start.isSameOrBefore(end, \"day\")) {\n        arr.push(start.format(\"YYYY-MM-DD\"))\n        start = start.add(1, \"day\")\n    }\n    return arr\n}","export const getDate = (): Array<string> => Object.keys(localStorage)\n","export const uppercaseFirstLetter = (str: string): string => {\n    if (!str) return str\n    return str[0].toUpperCase() + str.slice(1)\n}\n","import React, {ReactElement} from \"react\"\nimport s from \"./App.module.css\"\nimport {Month} from \"./Month/Month\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {AppStateType} from \"../bll/redux-store\"\n\n\nconst App = (): ReactElement => {\n\n    const month = useSelector<AppStateType, number>(state => state.calendar.currentMonth)\n    const year = useSelector<AppStateType, number>(state => state.calendar.currentYear)\n    const selectedDays = useSelector<AppStateType, Array<string>>(state => state.calendar.selectedDays)\n    const dispatch = useDispatch()\n\n    return (\n        <div className={s.app}>\n            <h1>Календарь</h1>\n            <Month selectedDays={selectedDays} year={year} month={month} dispatch={dispatch}/>\n        </div>\n    )\n}\n\nexport default App\n","import {combineReducers, createStore, Store} from \"redux\"\nimport {calendarReducer} from \"./calendarReducers\"\n\nconst reducer = combineReducers({\n    calendar: calendarReducer\n})\n\nexport type AppStateType = ReturnType<typeof reducer>\nexport type StoreType = Store<AppStateType>\n\nexport const store: StoreType = createStore(reducer)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./ui/App\"\nimport {Provider} from \"react-redux\"\nimport {store} from \"./bll/redux-store\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"caption_table\":\"Caption_caption_table__269PX\",\"caption_table_month\":\"Caption_caption_table_month__1d8S0\",\"arrow\":\"Caption_arrow__1kjNX\",\"arrow_left\":\"Caption_arrow_left__B-5yP\",\"arrow_right\":\"Caption_arrow_right__aougB\",\"arrow_border\":\"Caption_arrow_border__1tttT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table_ceil\":\"Day_table_ceil__CbRE-\",\"table_ceil_month\":\"Day_table_ceil_month__1YPRM\",\"table_ceil_current_day\":\"Day_table_ceil_current_day__1Nbaw\",\"selectedDay\":\"Day_selectedDay__13hGh\",\"active\":\"Day_active__3mBf1\"};"],"sourceRoot":""}